#!/usr/bin/env ruby

class AttestRunner
  def banner()
    @banner ||= %{
# bin/attest: A test runner worth using
#
# Key features:
#
#  * Run it from the base directory of your project and it will include the
#    'lib' directory and run all tests in the 'test' directory 
#
#  * Easily specify a glob to restrict the test files that are run
#
#  * Select which top-level test(s) to run using a regular expression
#
#  * Keep your test code free of require statements: put common ones
#    in test/_setup.rb; the runner loads 'attest' for you
#
#  * Run each test file separately if you wish
#
# Usage examples:
#
#   attest                 (run all test files under 'test' dir)
#   attest topic           (run only files whose path contains 'topic')
#
#   attest --list          (list the test files and exit)
#   attest --testdir spec  (run tests from the 'spec' directory, not 'test')
#   attest -t spec widget  (as above, but only files whose path contains 'widget')
#   attest -f etc/a.rb     (just run the one file; full path required)
#   attest --filter simple (filter top-level tests by the given regex)
#
# Formal options:
    }.strip.gsub(/^#/, ' ')
  end
end


require 'optparse'
require 'ostruct'
require 'attest'
class ::Object; include Attest; end

END { AttestRunner.new.run }

class AttestRunner
  def initialize
    @options = OpenStruct.new(defaults())
    @files   = nil   # will be set by generate_file_list
  end

  def run
    parse_options(ARGV)   # side-effect: @options
    case @options.command
    when :run         then do_run
    when :list        then do_list
    when :file        then do_file
    when :help        then do_help
    end
  end

  # *--------------------------------------------------------------------*
  #                    parse_options, defaults, parser

  def parse_options(args)
    parser().parse!(args)
    # Having removed all options from args, whatever is left is our glob(s)
    @options.globs = args.slice!(0..-1)
    vmsg "Specified glob(s): #{@options.globs.join(' ')}"
  rescue OptionParser::ParseError => e
    $stderr.puts
    $stderr.puts e
    $stderr.puts
    $stderr.puts parser()
    exit 1
  end

  def defaults
    @default ||= {
      :command  => :run,     # :run, :example, :list, :file, :help
      :globs    => [],
      :includes => ['lib'],
      :testdir  => 'test',
      :pattern  => nil,
      :file     => nil,
      :run_separately => false,
      :verbose  => false,
    }
  end

  def parser
    @parser ||= OptionParser.new do |p|
      p.banner = banner()
      p.separator "  "
      p.separator "  Commands"
      p.on('--file', '-f FILE', "Run the specified file only",
                                "  (_setup.rb won't be run)") \
        { |file| @options.command = :file; @options.file = file }
      p.on('--list', '-l', "List the available test files and exit") \
        { @options.command = :list }
      p.separator "  "
      p.separator "  Modifiers"
      p.on('-e', '--filter REGEX', String, "Select top-level test(s) to run") \
        { |pattern| @options.filter = Regexp.compile(pattern, Regexp::IGNORECASE) }
      p.on('-I', '--include DIR,...', Array, "Add directories to library path",
                                  "  instead of 'lib'") \
        { |dirs| @options.includes = dirs }
      p.on('--testdir', '-t DIR', "Specify the test directory (default 'test')") \
        { |dir| @options.testdir = dir }
      p.on('--no-include', "Don't add any directory to library path") \
        { @options.includes = [] }
      p.separator "  "
      p.separator "  Running options"
      p.on('--separate', '-s', "Run each test file separately") \
        { @options.run_separately = true }
      p.separator "  "
      p.separator "  Miscellaneous"
      p.on('-v', '--verbose') \
        { @options.verbose = true }
      p.on('-h', '--help') \
        { @options.command = :help }
    end
  end

  # *--------------------------------------------------------------------*
  #            do_run, do_example, do_list, do_file, do_help

  def do_run
    ready
    aim
    fire!
  end

  def do_list
    testdir = @options.testdir
    globs = @options.globs
    suffix = globs.empty?  ?  ""  :  "matching #{globs.join(',')}"
    puts "Ruby files under '#{testdir}' #{suffix}"
    generate_file_list
    puts @files.map { |f| "  #{f}" }
  end

  def do_file
    file = @options.file
    vmsg "Running single file: #{file}"
    unless File.file?(file)
      error "File '#{file}' doesn't exist!"
    end
    require 'attest/auto'
    load file
  end

  def do_help
    puts
    puts parser()
    puts
    exit
  end

  # *--------------------------------------------------------------------*
  #               ready, aim, fire! (implementation of #run)

    # Set up the library path.
  def ready
    includes = @options.includes
    unless Array === includes
      error "Invalid value for @options.includes: #{includes.inspect}"
    end
    includes.each do |dir|
      $:.unshift dir
    end
  end

    # Set @files to be the files we're running.
    # Set @setup_file to be the setup file _setup.rb, if any.
  def aim
    testdir = @options.testdir
    vmsg "Current directory: '#{Dir.pwd}'; Test: '#{testdir}'"
    files = Dir["#{testdir}" + "/**/*.rb"]
    setup = File.join(@options.testdir, "_setup.rb")
    @setup_file = files.delete(setup)
    globs = @options.globs
    @files =
      if globs.empty?
        files
      else
        files.select { |path|
          globs.any? { |glob| path.index(glob) }
        }
      end
  end
  alias generate_file_list aim

    # Load and run the tests.  Run the setup file first if it exists.
  def fire!
    if @setup_file
      vmsg "Running #{@setup_file} first"
      load @setup_file
    else
      vmsg "No setup file #{@setup_file} to run"
    end
    if @options.run_separately
      @files.each { |file|
        _print_banner(file)
        load file
        Attest.run(:filter => @options.filter)
      }
    else
      @files.each { |file|
        vmsg "Loading file: #{file}"
        load file
      }
      Attest.run(:filter => @options.filter)
    end
  end

  def _print_banner(str)
    ndashes = 76 - str.length
    n1 = ndashes / 2
    n2 = ndashes - n1
    puts
    puts
    puts " #{'=' * n1} #{str} #{'=' * n2}".yellow.bold
  end


  # *--------------------------------------------------------------------*
  #                               vmsg, error

  def vmsg(str)
    if @options.verbose
      puts "[attest] #{str}"
    end
  end

  def error(str)
    $stderr.puts "[attest] Error!"
    $stderr.puts "[attest] #{str}"
    exit 1
  end

end  # class AttestRunner

