h1. attest

bq. *attest* (v) to bear witness to; certify; declare to be correct, true, or
genuine; declare the truth of, in words or writing, esp. affirm in an official
capacity: <i>to attest the truth of a statement</i>. 

*attest* is a unit-testing library, a derivative work of Suraj N. Karaputi's
"dfect":http://snk.tuxfamily.org/lib/dfect, version 2.1.0.

*attest* features:
* Terse testing methods (D, T, F, Eq, Mt, E, ...) that keep the focus on _your_
  code, not the testing library's code.
* Useful, colourful output that helps you determine what's gone wrong and why.
* Colour-coding to draw a contrast between actual and expected values; to
  elucidate the difference between two strings; and to make the output in
  general more readable.
* A global variable @$attest@ that assists you in running the
  debugger only during a certain test.
* A colourful summary (PASS/FAIL) detailing the number of tests run, etc.

h4. Screenshots

["one":http://picasaweb.google.com/lh/photo/WyrF7D7I4sKnSNCz0RlBJw] &nbsp; &nbsp;
["two":http://picasaweb.google.com/lh/photo/N8kCnZ3U3wFqKBKKJM9Crg] &nbsp; &nbsp; 
["three":http://picasaweb.google.com/lh/photo/7r2o1HWCjyEOhjc7o1nluQ]


h2. Install

%{color: red}Note: this section is incorrect until this notice is removed!%

attest 1.0.0 was released on xx April 2010.

Available via @[sudo] gem install attest@.

To see an example of output, run

bc.   attest --example {1|2|3}


h2. Usage

As *attest* is based on *dfect*, there is a lot to be gained by perusing
["dfect's excellent documentation":http://snk.tuxfamily.org/lib/dfect].  Here is
an overview of attest, by example.

...


h2. Future

I'm hoping to add user-defined assertions.  For instance, my geometry project
*rgeom* (which for the moment uses *test/unit*) has methods like
@assert_circle@, @assert_triangle@, etc., which make the testing code more
concise. 

One way for *attest* to support this idea might be:

bc..       Dfect.assertion(:circle) do |circle, array|
        Eq circle.label,    array.shift
        Eq circle.centre.x, array.shift
        Eq circle.centre.y, array.shift
        Eq circle.radius,   array.shift
      end

      # ...

      D "Circle given centre and diameter" do
        Circle(:X, :centre => :A, :diameter => 7).tap do |c|
          T :circle, c, [:X, 4, 1.9, 3.5]
        end
      end

p. Something to think about.  That code may not be clear to unfamiliar eyes, but
when you have lots of repeated compound assertions, brevity beats clarity any
day @;)@

Possible future versions:
* 1.0.1: code cleanup
* 1.1.0: additional built-in assertions as experience dictates their usefulness
* 1.2.0: user-defined assertions

I'm not anticipating any significant change beyond that.


h2. License

*attest* is a derivative work of *dfect* and inherits dfect's license (ISC).

pre.. 'attest':         Copyright 2010 Gavin Sinclair    <gsinclair@gmail.com>
'dfect':          Copyright 2009 Suraj N. Kurapati <sunaku@gmail.com>

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

